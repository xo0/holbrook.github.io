#+TITLE: 建立下一代交易结算体系服务管理体系的建议书
#+DATE: 2015-01-08
#+AUTHOR: 王海阔


* 概述

** 问题的提出

在《统一接入问题分析报告》中，我对问题的优先级建议如下：


  [[./abc.jpg]]

我认为现阶段整个下一代交易结算体系中，要解决的最紧急、最重要的问题就是：

- 建立协议规范体系
- 建立业务分析机制

这两个问题实际是互相关联的。

** 范围

   [[./ngntsup_images/index.png]]



结合成熟的方法论，对现有的工作方式进行检查和反思。
参考了RUP、SOMA、CBM、SIMM



服务集成成熟度模型 (SIMM)
SIMM 可以评估当前企业服务导向的成熟度，从而使企业能够分阶段、有序地完成企业向 SOA 的过渡。

面向服务的建模和体系结构（SOMA）



* 业务分析和业务服务模型

SOA(Service-Oriented Architecture，面向服务架构), 是一种软件组建与开发的方式，强调以“服务”为基本元素来组建企业IT架构。
需要强调的是，SOA是一种软件架构风格（架构设计的方法和原则)，强调抽象和松耦合；SOA的目标是实现业务意义上的“重用”和“互操作”，
将企业的IT资源整合成可操作的、基于标准的服务，从而能够被重新组合和应用。

SOA需要将“业务服务”作为架构的元素，但没有解决如何定义“业务服务”的问题。


SOMA 是一种用于 SOA 解决方案实现的端到端方法。它是用于 SOA 设计和构造以支持目标业务流程的分析和设计方法。
在SOMA中，

Service-Oriented Modeling and Architecture，SOMA
简单来说，SOMA：
- 以CBM为分析方法
- 以SOA为架构原则
- 遵循RUP方法论


** 过程建模方法论选型

EPC

** 业务服务模型设计




* 现状和问题
AS-IS:
1. 应用系统提供接口定义
2. 配置接口协议转换
3. 发布
4. 编写文档（经过恒生公司）
5. 分发文档

问题:
1. 更新不及时
2. 文档不准确
3. 效率低下
4. 无法充分利用接口定义


目前为止，我们工作的单元是“接口”。带来的问题：
- 接口与业务的关系
- 发布
；；；服务的发布，而不是接口的发布

所有这些问题在于，“接口”只是“服务“的具体实现。无法承载整个架构中需要的信息。
业务需求--》分析设计--》服务--》开发--》接口--》部署--》节点

所以，有必要
从服务的视角审视/看待整个下一代交易结算体系结构

为此，要先明确”服务模型“。参考SOMA中的定义，结合我们自身的特点，提出如下图的”服务模型“：



* 服务模型

业务服务-应用服务-接口



在这个定义中，“服务”不是一个技术层面的定义，而是业务层面的术语。

从业务到技术，需要通过“服务模型”来描述整个服务的生态环境。


服务模型是对企业内实施的且支持开发一个或多个面向服务的解决方案的 IT
服务的抽象。
它用于构思和记录软件服务的设计。它是全面的组合工作产品，包含所有服务、服务提供者、规范、分区、消息、协作及它们之间的关系

** 业务服务和CBM

IBM组件化业务模型[fn:1]

** 服务



为服务交互（在 Web
服务术语中）提供了端点，而这些交互的定义则是服务规范的一部分。
在模型中，服务不仅能够确定已提供的接口，还能确定所需的接口（例如回调接口）

服务是面向服务的体系结构中的关键工件，但是什么是服务呢？以下是 Rational
Unified Process（RUP）词汇表中的条目。


服务的作用：

- 作为技术基础结构
- 作为设计的概念框架
- 作为业务和 IT 之间的桥梁
- 作为基于组件和 OO 技术的演进


 SOA 作为技术基础结构

系统由服务的集合组成，这些服务调用通过其服务界面定义的操作。 现在，许多组织都根据服务及其互连来表达它们的解决方案。使用 SOA 的最终目标就是实现业务和 IT 的灵活性。还定义了许多重要的技术来支持 SOA 方法，最值得注意的是跨多台机器分发服务和通过因特网或内部网连接服务。这些 Web service 方法依靠服务内的通信协议（如 SOAP）；允许在公共目录中注册并在通用描述、发现和集成（UDDI）存储库中搜索 Web service 界面（用 Web Service 定义语言 － WSDL 表示）；共享用 XML 定义和以标准模式描述的文档中的信息。此外，还开发了针对策略、安全性、可靠性、发现等其他领域的标准；这一系列的标准通常称为“WS-* 系列”。

但 SOA 只是一组标准和服务描述，就象面向对象只是一组类层次结构一样。实际上，可以创建不使用 Web service 技术的 SOA，也可以用非面向服务的方法使用 Web service 技术。要了解为什么面向服务的观点为业务增加了价值，以及如何设计、实施、部署和管理面向服务的解决方案，还需要了解很多内容。[另外，SOA 不等于 WS]
SOA 作为设计的概念框架

为 SOA 创建解决方案意味着重新考虑今天构建的系统种类、重新考虑组织中的技能，并重新定义团队成员协作的方法。最重要的是，开发解决方案时采取服务方向需要更广泛地复查其对于如何设计解决方案的影响、从完全不同的服务将它们组合在一起意味着什么，以及如何管理和演进部署的面向服务的解决方案。

此转变中的一个重要更改就是术语“应用程序”，因为我们知道从以应用程序作为所有项目的中心转变为将重点放在业务依靠的服务组合上时，会有问题。在这点上，我们可以将这个从面向应用程序的项目到面向服务的项目的转变当作从设计组成应用程序的一组垂直集成的组件到设计一组水平服务的转变。将来，我们会看到术语应用程序被归类为近似于用户交互服务的一小层特定业务逻辑的描述，该描述将编排提供批量值的业务和基础结构服务集合。

Gartner 指的是服务方向作为面向服务的应用程序开发（SODA）的这个更大的环境。Gartner 认为 SODA 的五个主要原则是组合、自适应流程管理、基于服务的互操作性和集成、发现和描述以及快速应用程序维护。从工具供应商的角度，这些领域与三个领域中提供的技术支持有关：

SOA 生命周期。“发现和描述”和“快速应用程序维护”原则指的是服务的生命周期以及它们是如何被发现、应用、演进和维护的。工具供应商不断地提供越来越多的用于存储、编目、搜索和检索服务的方法。对正在进行的服务演进的支持是其中一个重要方面，它导致服务具有多个版本。

SOA 平台和编程模型。基于服务的互操作性和集成原则指的是在特定的运行时平台中连接、部署和管理服务的方法。主要平台供应商支持面向服务的功能直接作为中间件运行时的一部分，并将其运行时编程模型演进成作为第一类元素的表面服务概念。因此，可从一个基于服务的透视图构思、设计、实施和管理解决方案。

SOA 实践和工具。组合和自适应流程管理原则指的是在解决不断变化的业务需求的环境中如何创建和组合服务。工具供应商支持挖掘现有的应用程序来发现潜在的服务、合并现有的功能以使那些功能可作为服务来访问、创建新服务并通过连接用其界面显现的行为来连接服务。 这样做的基础是以可重复、可预知的方法设计面向服务的解决方案时提供明确的指导信息和最佳实践。

所有这三个方面对于成功开发面向服务的解决方案都很重要。它们必须全部解决才能满足组织有效创建更灵活、更符合业务目标的解决方案的需求。
SOA 作为跨接业务和 IT 的解决方案的整体方法

在开发企业规模解决方案时要应对的一个主要挑战是用 IT 组织设计的特定于技术的解决方案连接业务分析员表达的特定于领域的需求。通常，这两个完全不同的领域之间不会连接良好。这两个团体有不同的技能，使用不同的建模概念和表示法（如果有的话），并很少理解那些概念之间的映射。使用面向服务的方法旨在帮助跨接业务分析员和业务线专家与 IT 专家（如架构设计师、系统分析员、集成人员、设计人员和开发人员）之间的间隔。特别是，围绕核心服务集合集成流程、资产和可交付件旨在以清楚、明确的方法连接系统这两个不同的方面。

SOA 提供了侧重服务的视图来帮助应对这些挑战：

桥接业务与 IT 的间隔。使活动和流程的业务视图符合用于实现部分这些活动的技术是最基本的。这种符合性包括业务模型驱动下游开发的能力以及将业务模型和 IT 解决方案结合演进的能力。该服务概念对于这种符合性是至关重要的。服务和基于服务的考虑形成了将业务分析员、IT 架构设计师、集成人员和开发人员联系在一起的共同基础。服务的特性、详细程度级别以及它们提倡的封装级别使它们更加符合驱动业务的业务流程模型。共同的设计实践对此是很重要的，它能确保概念、工作产品和任务在这些不同的角度保持同步。最后，具有能有效地将代表业务目的的模型转换为有效的实施的工具，这对于跨接业务与 IT 之间的间隔也是很重要的。

支持在 IT 组织中更改角色。向服务考虑的转变更改了组织中的技能和团队组合。开发的重点在于用突出服务级别协议（SLA）和服务间协议的体系结构描述来发现、定义、管理和组合服务。传统的将工具功能分解为今天的产品线的做法对于此方法是不合适的。IT 组织中的不同成员将需要不同的功能组合。例如，诸如软件设计人员之类的现有角色所需的技能正转变为更重视跨不同的服务提供者集合来组合和管理服务。类似地，诸如集成专家之类的新角色正在涌现，其重点在于组合基于服务的价值链，以支持组织的主要业务目标。

侧重于资产和复用。将服务看作系统设计中的主要资产改变了组织对复用这些服务的价值的看法。我们前面讨论了从垂直开发一组应用程序组件转变为水平集成组件。其中一个有价值的方面就是服务本身的可复用性提高了。事实上，它们组合为新的功能和新的服务是驱动变更的基本因素。在许多企业中，SOA 的高可复用性证明了对设计和开发服务组合进行投资是有意义的。因此，管理资产的技术和捕获组合资产的模式的可重复方法变得异常重要。在基于资产的开发方法中，这些资产对于组织而言有重要价值，必须认真进行管理。管理资产的团队基础结构在该方法中起到了关键作用。

在专业角色内部和专业角色之间提高协作级别。企业应用程序开发一直发现软件开发需要人们密切合作并注重管理共享资产的生命周期、工作产品可跟踪性以及共享的实践和流程。随着组织的地理分布范围更广、团队中个人之间的实时通信增加，以及软件被嵌套为更大的系统开发启动规划的一部分，进行软件开发更需要进行协作。软件开发基础结构的角色将越来越被看作是促进跨团队共享和复用服务的软件专业人员的协作开发环境。
SOA 作为基于组件和面向对象技术的演进

在软件工程的任何新的开发行为中，很容易假设：可以应用在先前的项目中起过作用的相同技巧和工具。 这种用旧解决方案解决新问题的倾向并不新奇。 类似地，当开发人员开始创建基于组件的应用程序时，他们尝试用自己的面向对象开发的经验来解决问题。 有了更多的经验，就可以理解，面向对象技术和语言是实施组件的极佳方法，虽然我们必须知道通过决策和实施所作出的权衡。 权衡涉及到实施多形态行为的继承和聚集或者重新设计类库，以便可使用各组组件，而不是作为单一 C++ 应用程序的基础。

类似地，我们将组件视为实施服务的最佳方法，虽然必须知道，基于组件的示范应用程序不一定能用作示范的 SOA。 我们一旦了解服务在应用程序体系结构中扮演的角色，就可以充分利用贵公司的组件开发人员和现有组件。 作出这一转变的关键，就是要意识到面向服务方法意味着另一个应用程序体系结构层。 下面的图说明，当作为解决方案的消费者时，可如何将技术层应用于应用程序体系结构来提供详细程度更低的实施。用来指代这一部分系统的术语是“应用程序边缘”，该术语反映了服务是展示系统外部视图的好方法这一事实，以及使用传统组件设计来进行内部复用和组合。 查看对象、组件和服务之间差异的一种方法是将它们与其实施耦合；一个对象与其编程语言紧密耦合，组件与一些运行时或平台（COM、CORBA 和 J2EE 等）耦合，而服务确实只与用于描述其规范的标准集耦合。


业务层：
服务定义
应用层：
服务组件（包括消息定义等）


* 服务交付流程
** 服务的确定

服务应该是业务....
CMB是。。。。

下面是一个零售业CMB的例子：




** 服务设计
** 服务规范建设

*** 接口定义

Message, Dict

接口转换：

MessageTransform, DictTransform


** 服务实现

** 服务暴露（ESB/统一接入）

一般来说，服务请求需要经过如下的过程：



为了简化服务的调用，便于集中管理，xxxxx，需要有一个总线对服务进行统一的管理和调度；处理服务编排。。。。——ESB！

在下一代交易结算体系中，ESB的职责由统一接入负责

要将服务接口通过统一接入暴露出去，需要经过如下步骤：

1. 接入点
2. 。。。


** 服务发布

1. 版本
2. 部署和访问点
3. 接口文档
4. 测试报告
5. xxx

* ESB
  统一接入扮演ESB的角色

  在EIP(Enterprise Integration Patterns)中，和Message(消息/报文）相关的架构组件包括：

- Channel
- Pipe
- Filter
- Router
- Translator
- Endpoint


* 接口调试






CQRS: CQRS Command Query Responsibility Segregation(命令查询职责分离)
EDA
EIP（Enterprise Integeration Patterns


* 参考资料
